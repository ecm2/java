{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[354],{764:function(t,a,s){\"use strict\";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"p\",[t._v(\"[TOC]\")]),t._v(\" \"),s(\"h1\",{attrs:{id:\"第三节-contextloaderlistener\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三节-contextloaderlistener\"}},[t._v(\"#\")]),t._v(\" 第三节 ContextLoaderListener\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1、提出问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、提出问题\"}},[t._v(\"#\")]),t._v(\" 1、提出问题\")]),t._v(\" \"),s(\"p\",[t._v(\"目前情况：DispatcherServlet 加载 spring-mvc.xml，此时整个 Web 应用中只创建一个 IOC 容器。将来整合Mybatis、配置声明式事务，全部在 spring-mvc.xml 配置文件中配置也是可以的。可是这样会导致配置文件太长，不容易维护。\")]),t._v(\" \"),s(\"p\",[t._v(\"所以想到把配置文件分开：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"处理浏览器请求相关：spring-mvc.xml 配置文件\")]),t._v(\" \"),s(\"li\",[t._v(\"声明式事务和整合Mybatis相关：spring-persist.xml 配置文件\")])]),t._v(\" \"),s(\"p\",[t._v(\"配置文件分开之后，可以让 DispatcherServlet 加载多个配置文件。例如：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"servlet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"servlet-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"dispatcherServlet\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"servlet-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"servlet-class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"org.springframework.web.servlet.DispatcherServlet\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"servlet-class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"init-param\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"param-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"contextConfigLocation\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"param-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"param-value\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"classpath:spring-*.xml\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"param-value\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"init-param\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"load-on-startup\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"1\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"load-on-startup\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"servlet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"如果希望这两个配置文件使用不同的机制来加载：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"DispatcherServlet 加载 spring-mvc.xml 配置文件：它们和处理浏览器请求相关\")]),t._v(\" \"),s(\"li\",[t._v(\"ContextLoaderListener 加载 spring-persist.xml 配置文件：不需要处理浏览器请求，需要配置持久化层相关功能\")])]),t._v(\" \"),s(\"p\",[t._v(\"此时会带来一个新的问题：在 Web 一个应用中就会出现两个 IOC 容器\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"DispatcherServlet 创建一个 IOC 容器\")]),t._v(\" \"),s(\"li\",[t._v(\"ContextLoaderListener 创建一个 IOC 容器\")])]),t._v(\" \"),s(\"p\",[t._v(\"注意：本节我们探讨的这个技术方案并不是\"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"『必须』\")]),t._v(\"这样做，而仅仅是\"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"『可以』\")]),t._v(\"这样做。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2、配置-contextloaderlistener\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、配置-contextloaderlistener\"}},[t._v(\"#\")]),t._v(\" 2、配置 ContextLoaderListener\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1创建-spring-persist-xml\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1创建-spring-persist-xml\"}},[t._v(\"#\")]),t._v(\" ①创建 spring-persist.xml\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img022.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2配置-contextloaderlistener\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2配置-contextloaderlistener\"}},[t._v(\"#\")]),t._v(\" ②配置 ContextLoaderListener\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 通过全局初始化参数指定 Spring 配置文件的位置 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"context-param\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"param-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"contextConfigLocation\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"param-name\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"param-value\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"classpath:spring-persist.xml\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"param-value\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"context-param\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"listener\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 指定全类名，配置监听器 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"listener-class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"org.springframework.web.context.ContextLoaderListener\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"listener-class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"listener\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"_3contextloaderlisteners\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3contextloaderlisteners\"}},[t._v(\"#\")]),t._v(\" ③ContextLoaderListeners\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img023.png\",alt:\"images\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"方法名\")]),t._v(\" \"),s(\"th\",[t._v(\"执行时机\")]),t._v(\" \"),s(\"th\",[t._v(\"作用\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"contextInitialized()\")]),t._v(\" \"),s(\"td\",[t._v(\"Web 应用启动时执行\")]),t._v(\" \"),s(\"td\",[t._v(\"创建并初始化 IOC 容器\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"contextDestroyed()\")]),t._v(\" \"),s(\"td\",[t._v(\"Web 应用卸载时执行\")]),t._v(\" \"),s(\"td\",[t._v(\"关闭 IOC 容器\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4contextloader\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4contextloader\"}},[t._v(\"#\")]),t._v(\" ④ContextLoader\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-指定配置文件位置的参数名\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-指定配置文件位置的参数名\"}},[t._v(\"#\")]),t._v(\" [1]指定配置文件位置的参数名\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n * Name of servlet context parameter (i.e., {@value}) that can specify the\\n * config location for the root context, falling back to the implementation's\\n * default otherwise.\\n * @see org.springframework.web.context.support.XmlWebApplicationContext#DEFAULT_CONFIG_LOCATION\\n */\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" CONFIG_LOCATION_PARAM \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"contextConfigLocation\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"_2-初始化-ioc-容器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-初始化-ioc-容器\"}},[t._v(\"#\")]),t._v(\" [2]初始化 IOC 容器\")]),t._v(\" \"),s(\"p\",[t._v(\"方法名：initWebApplicationContext()\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-创建-ioc-容器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-创建-ioc-容器\"}},[t._v(\"#\")]),t._v(\" [3]创建 IOC 容器\")]),t._v(\" \"),s(\"p\",[t._v(\"方法名：createWebApplicationContext()\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3、探讨两个ioc容器之间的关系\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、探讨两个ioc容器之间的关系\"}},[t._v(\"#\")]),t._v(\" 3、探讨两个IOC容器之间的关系\")]),t._v(\" \"),s(\"p\",[t._v(\"打印两个 IOC 容器对象的 toString() 方法：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" springIOC \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" servletContext\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAttribute\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"org.springframework.web.context.WebApplicationContext.ROOT\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nlogger\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"debug\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"springIOC\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" springMVCIOC \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" servletContext\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getAttribute\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nlogger\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"debug\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"springMVCIOC\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"打印效果是：\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"Root\")]),t._v(\" WebApplicationContext, started on Thu Jun 17 14:49:17 CST 2021\")]),t._v(\" \"),s(\"p\",[t._v(\"WebApplicationContext for namespace 'dispatcherServlet-servlet', started on Thu Jun 17 14:49:18 CST 2021, \"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"parent\")]),t._v(\": Root WebApplicationContext\")])]),t._v(\" \"),s(\"p\",[t._v(\"结论：两个组件分别创建的 IOC 容器是\"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"父子\")]),t._v(\"关系。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"父容器：ContextLoaderListener 创建的 IOC 容器\")]),t._v(\" \"),s(\"li\",[t._v(\"子容器：DispatcherServlet 创建的 IOC 容器\")])]),t._v(\" \"),s(\"p\",[t._v(\"父子关系是如何决定的？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"ContextLoaderListener 初始化时如果检查到有已经存在的根级别 IOC 容器，那么会抛出异常。\")]),t._v(\" \"),s(\"li\",[t._v(\"DispatcherServlet 创建的 IOC 容器会在初始化时先检查当前环境下是否存在已经创建好的 IOC 容器。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"如果有：则将已存在的这个 IOC 容器设置为自己的父容器\")]),t._v(\" \"),s(\"li\",[t._v(\"如果没有：则将自己设置为 root 级别的 IOC 容器\")])])]),t._v(\" \"),s(\"li\",[t._v(\"同时 Tomcat 在读取 web.xml 之后，加载组件的顺序就是监听器、过滤器、Servlet。\")])]),t._v(\" \"),s(\"p\",[t._v(\"DispatcherServlet 创建的 IOC 容器设置父容器的源码截图：\")]),t._v(\" \"),s(\"p\",[t._v(\"所在类：org.springframework.web.servlet.FrameworkServlet\")]),t._v(\" \"),s(\"p\",[t._v(\"所在方法：createWebApplicationContext()\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img024.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_4、探讨两个-ioc-容器之间-bean-的互相访问\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、探讨两个-ioc-容器之间-bean-的互相访问\"}},[t._v(\"#\")]),t._v(\" 4、探讨两个 IOC 容器之间 bean 的互相访问\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img113.png\",alt:\"images\"}})]),t._v(\" \"),s(\"p\",[t._v(\"spring-mvc.xml配置方式：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"base-package\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.spring.component.controller\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"spring-persist.xml配置方式：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"base-package\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.spring.component.service,com.atguigu.spring.component.dao\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"所以bean所属IOC容器的关系：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"父容器\\n\"),s(\"ul\",[s(\"li\",[t._v(\"EmpService\")]),t._v(\" \"),s(\"li\",[t._v(\"EmpDao\")])])]),t._v(\" \"),s(\"li\",[t._v(\"子容器\\n\"),s(\"ul\",[s(\"li\",[t._v(\"EmpController\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"结论：子容器中的 EmpController 装配父容器中的 EmpService 能够正常工作。说明子容器可以访问父容器中的bean。\")]),t._v(\" \"),s(\"p\",[t._v(\"分析：“子可用父，父不能用子”的根本原因是子容器中有一个属性 \"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"getParent()\")]),t._v(\" 可以获取到父容器这个对象的引用。\")]),t._v(\" \"),s(\"p\",[t._v(\"源码依据：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"在 AbstractApplicationContext 类中，有 parent 属性\")]),t._v(\" \"),s(\"li\",[t._v(\"在 AbstractApplicationContext 类中，有获取 parent 属性的 getParent() 方法\")]),t._v(\" \"),s(\"li\",[t._v(\"子容器可以通过 getParent() 方法获取到父容器对象的引用\")]),t._v(\" \"),s(\"li\",[t._v(\"进而调用父容器中类似 “getBean()” 这样的方法获取到需要的 bean 完成装配\")]),t._v(\" \"),s(\"li\",[t._v(\"而父容器中并没有类似 “getChildren()“ 这样的方法，所以没法拿到子容器对象的引用\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img114.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_5、有可能重复创建对象\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、有可能重复创建对象\"}},[t._v(\"#\")]),t._v(\" 5、有可能重复创建对象\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img115.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1查看日志确认是否重复创建了对象\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1查看日志确认是否重复创建了对象\"}},[t._v(\"#\")]),t._v(\" ①查看日志确认是否重复创建了对象\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"Root WebApplicationContext: initialization started\")]),t._v(\" \"),s(\"p\",[t._v(\"……\")]),t._v(\" \"),s(\"p\",[t._v(\"Creating shared instance of singleton bean 'helloDao'\\nCreating shared instance of singleton bean 'helloHandler'\\nCreating shared instance of singleton bean 'helloService'\")]),t._v(\" \"),s(\"p\",[t._v(\"……\")]),t._v(\" \"),s(\"p\",[t._v(\"Root WebApplicationContext initialized in 1150 ms\")]),t._v(\" \"),s(\"p\",[t._v(\"……\")]),t._v(\" \"),s(\"p\",[t._v(\"Refreshing WebApplicationContext for namespace 'dispatcherServlet-servlet'\")]),t._v(\" \"),s(\"p\",[t._v(\"……\")]),t._v(\" \"),s(\"p\",[t._v(\"Creating shared instance of singleton bean 'helloDao'\")]),t._v(\" \"),s(\"p\",[t._v(\"Creating shared instance of singleton bean 'helloHandler'\")]),t._v(\" \"),s(\"p\",[t._v(\"Creating shared instance of singleton bean 'helloService'\")]),t._v(\" \"),s(\"p\",[t._v(\"……\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2重复创建对象的问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2重复创建对象的问题\"}},[t._v(\"#\")]),t._v(\" ②重复创建对象的问题\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"浪费内存空间\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"两个 IOC 容器能力是不同的\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"spring-mvc.xml：仅配置和处理请求相关的功能。所以不能给 service 类附加声明式事务功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"结论：基于 spring-mvc.xml 配置文件创建的 EmpService 的 bean 不带有声明式事务的功能\")]),t._v(\" \"),s(\"p\",[t._v(\"影响：DispatcherServlet 处理浏览器请求时会调用自己创建的 EmpController，然后再调用自己创建的EmpService，而这个 EmpService 是没有事务的，所以处理请求时\"),s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"没有事务功能的支持\")]),t._v(\"。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"spring-persist.xml：配置声明式事务。所以可以给 service 类附加声明式事务功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"结论：基于 spring-persist.xml 配置文件创建的 EmpService 有声明式事务的功能\")]),t._v(\" \"),s(\"p\",[t._v(\"影响：由于 DispatcherServlet 的 IOC 容器会优先使用自己创建的 EmpController，进而装配自己创建的EmpService，所以基于 spring-persist.xml 配置文件创建的有声明式事务的 EmpService 用不上。\")])])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3解决重复创建对象的问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3解决重复创建对象的问题\"}},[t._v(\"#\")]),t._v(\" ③解决重复创建对象的问题\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-解决方案一-建议使用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-解决方案一-建议使用\"}},[t._v(\"#\")]),t._v(\" [1]解决方案一[建议使用]\")]),t._v(\" \"),s(\"p\",[t._v(\"让两个配置文件配置自动扫描的包时，各自扫描各自的组件。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"SpringMVC 就扫描 XxxHandler\")]),t._v(\" \"),s(\"li\",[t._v(\"Spring 扫描 XxxService 和 XxxDao\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-解决方案二\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-解决方案二\"}},[t._v(\"#\")]),t._v(\" [2]解决方案二\")]),t._v(\" \"),s(\"p\",[t._v(\"如果由于某种原因，必须扫描同一个包，确实存在重复创建对象的问题，可以采取下面的办法处理。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"spring-mvc.xml 配置文件在整体扫描的基础上进一步配置：仅包含被 @Controller 注解标记的类。\")]),t._v(\" \"),s(\"li\",[t._v(\"spring-persist.xml 配置在整体扫描的基础上进一步配置：排除被 @Controller 注解标记的类。\")])]),t._v(\" \"),s(\"p\",[t._v(\"具体spring-mvc.xml配置文件中的配置方式如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 两个Spring的配置文件扫描相同的包 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 为了解决重复创建对象的问题，需要进一步制定扫描组件时的规则 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 目标：『仅』包含@Controller注解标记的类 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('\\x3c!-- use-default-filters=\"false\"表示关闭默认规则，表示什么都不扫描，此时不会把任何组件加入IOC容器；\\n        再配合context:include-filter实现“『仅』包含”效果 --\\x3e')]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"base-package\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.spring.component\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"use-default-filters\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"false\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- context:include-filter标签配置一个“扫描组件时要包含的类”的规则，追加到默认规则中 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- type属性：指定规则的类型，根据什么找到要包含的类，现在使用annotation表示基于注解来查找 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- expression属性：规则的表达式。如果type属性选择了annotation，那么expression属性配置注解的全类名 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"include-filter\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"type\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"annotation\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"expression\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"org.springframework.stereotype.Controller\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"具体spring-persist.xml配置文件中的配置方式如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 两个Spring的配置文件扫描相同的包 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 在默认规则的基础上排除标记了@Controller注解的类 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"base-package\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.spring.component\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 配置具体排除规则：把标记了@Controller注解的类排除在扫描范围之外 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"exclude-filter\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"type\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"annotation\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"expression\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"org.springframework.stereotype.Controller\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"context:\")]),t._v(\"component-scan\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"_6、小结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、小结\"}},[t._v(\"#\")]),t._v(\" 6、小结\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"DispatcherServlet 和 ContextLoaderListener 并存\\n\"),s(\"ul\",[s(\"li\",[t._v(\"DispatcherServlet 负责加载 SpringMVC 的配置文件，例如：spring-mvc.xml\")]),t._v(\" \"),s(\"li\",[t._v(\"ContextLoaderListener 负责加载 Spring 的配置文件，例如：spring-persist.xml\")])])]),t._v(\" \"),s(\"li\",[t._v(\"两个 IOC 容器的关系：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"ContextLoaderListener 创建的容器是父容器\")]),t._v(\" \"),s(\"li\",[t._v(\"DispatcherServlet 创建的容器是子容器\")])])]),t._v(\" \"),s(\"li\",[t._v(\"bean 的装配\\n\"),s(\"ul\",[s(\"li\",[t._v(\"子容器可以访问父容器中的 bean\")]),t._v(\" \"),s(\"li\",[t._v(\"父容器不能访问子容器中的 bean\")])])]),t._v(\" \"),s(\"li\",[t._v(\"两个容器扫描同一个包会导致重复创建对象\\n\"),s(\"ul\",[s(\"li\",[t._v(\"解决办法一：各自扫描各自的包\")]),t._v(\" \"),s(\"li\",[t._v(\"解决办法二：\\n\"),s(\"ul\",[s(\"li\",[t._v(\"DispatcherServlet 创建的容器仅扫描 handler\")]),t._v(\" \"),s(\"li\",[t._v(\"ContextLoaderListener 创建的容器不扫描 handler\")])])])])])]),t._v(\" \"),s(\"p\",[s(\"RouterLink\",{attrs:{to:\"/pro005-SpringMVC/lecture/chapter05/verse02.html\"}},[t._v(\"上一节\")]),t._v(\" \"),s(\"RouterLink\",{attrs:{to:\"/pro005-SpringMVC/lecture/chapter05/index.html\"}},[t._v(\"回目录\")])],1)])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}
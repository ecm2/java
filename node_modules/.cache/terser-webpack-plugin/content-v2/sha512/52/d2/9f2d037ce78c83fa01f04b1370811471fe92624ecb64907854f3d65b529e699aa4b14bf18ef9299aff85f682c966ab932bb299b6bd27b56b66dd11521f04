{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[353],{1586:function(t,a,n){\"use strict\";n.r(a);var e=n(44),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"p\",[t._v(\"[TOC]\")]),t._v(\" \"),n(\"h1\",{attrs:{id:\"实验十四-factorybean机制\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实验十四-factorybean机制\"}},[t._v(\"#\")]),t._v(\" 实验十四 FactoryBean机制\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"_1、简介\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、简介\"}},[t._v(\"#\")]),t._v(\" 1、简介\")]),t._v(\" \"),n(\"p\",[t._v(\"FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。\")]),t._v(\" \"),n(\"p\",[t._v(\"将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('/*\\n * Copyright 2002-2020 the original author or authors.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \"License\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \"AS IS\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */')]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"package\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"beans\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"factory\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"lang\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Nullable\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n * Interface to be implemented by objects used within a {@link BeanFactory} which\\n * are themselves factories for individual objects. If a bean implements this\\n * interface, it is used as a factory for an object to expose, not directly as a\\n * bean instance that will be exposed itself.\\n *\\n * <p><b>NB: A bean that implements this interface cannot be used as a normal bean.</b>\\n * A FactoryBean is defined in a bean style, but the object exposed for bean\\n * references ({@link #getObject()}) is always the object that it creates.\\n *\\n * <p>FactoryBeans can support singletons and prototypes, and can either create\\n * objects lazily on demand or eagerly on startup. The {@link SmartFactoryBean}\\n * interface allows for exposing more fine-grained behavioral metadata.\\n *\\n * <p>This interface is heavily used within the framework itself, for example for\\n * the AOP {@link org.springframework.aop.framework.ProxyFactoryBean} or the\\n * {@link org.springframework.jndi.JndiObjectFactoryBean}. It can be used for\\n * custom components as well; however, this is only common for infrastructure code.\\n *\\n * <p><b>{@code FactoryBean} is a programmatic contract. Implementations are not\\n * supposed to rely on annotation-driven injection or other reflective facilities.</b>\\n * {@link #getObjectType()} {@link #getObject()} invocations may arrive early in the\\n * bootstrap process, even ahead of any post-processor setup. If you need access to\\n * other beans, implement {@link BeanFactoryAware} and obtain them programmatically.\\n *\\n * <p><b>The container is only responsible for managing the lifecycle of the FactoryBean\\n * instance, not the lifecycle of the objects created by the FactoryBean.</b> Therefore,\\n * a destroy method on an exposed bean object (such as {@link java.io.Closeable#close()}\\n * will <i>not</i> be called automatically. Instead, a FactoryBean should implement\\n * {@link DisposableBean} and delegate any such close call to the underlying object.\\n *\\n * <p>Finally, FactoryBean objects participate in the containing BeanFactory's\\n * synchronization of bean creation. There is usually no need for internal\\n * synchronization other than for purposes of lazy initialization within the\\n * FactoryBean itself (or the like).\\n *\\n * @author Rod Johnson\\n * @author Juergen Hoeller\\n * @since 08.03.2003\\n * @param <T> the bean type\\n * @see org.springframework.beans.factory.BeanFactory\\n * @see org.springframework.aop.framework.ProxyFactoryBean\\n * @see org.springframework.jndi.JndiObjectFactoryBean\\n */\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FactoryBean\")]),n(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"T\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n\\t * The name of an attribute that can be\\n\\t * {@link org.springframework.core.AttributeAccessor#setAttribute set} on a\\n\\t * {@link org.springframework.beans.factory.config.BeanDefinition} so that\\n\\t * factory beans can signal their object type when it can't be deduced from\\n\\t * the factory bean class.\\n\\t * @since 5.2\\n\\t */\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" OBJECT_TYPE_ATTRIBUTE \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"factoryBeanObjectType\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n\\t * Return an instance (possibly shared or independent) of the object\\n\\t * managed by this factory.\\n\\t * <p>As with a {@link BeanFactory}, this allows support for both the\\n\\t * Singleton and Prototype design pattern.\\n\\t * <p>If this FactoryBean is not fully initialized yet at the time of\\n\\t * the call (for example because it is involved in a circular reference),\\n\\t * throw a corresponding {@link FactoryBeanNotInitializedException}.\\n\\t * <p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}\\n\\t * objects. The factory will consider this as normal value to be used; it\\n\\t * will not throw a FactoryBeanNotInitializedException in this case anymore.\\n\\t * FactoryBean implementations are encouraged to throw\\n\\t * FactoryBeanNotInitializedException themselves now, as appropriate.\\n\\t * @return an instance of the bean (can be {@code null})\\n\\t * @throws Exception in case of creation errors\\n\\t * @see FactoryBeanNotInitializedException\\n\\t */\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Nullable\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"T\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObject\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n\\t * Return the type of object that this FactoryBean creates,\\n\\t * or {@code null} if not known in advance.\\n\\t * <p>This allows one to check for specific types of beans without\\n\\t * instantiating objects, for example on autowiring.\\n\\t * <p>In the case of implementations that are creating a singleton object,\\n\\t * this method should try to avoid singleton creation as far as possible;\\n\\t * it should rather estimate the type in advance.\\n\\t * For prototypes, returning a meaningful type here is advisable too.\\n\\t * <p>This method can be called <i>before</i> this FactoryBean has\\n\\t * been fully initialized. It must not rely on state created during\\n\\t * initialization; of course, it can still use such state if available.\\n\\t * <p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return\\n\\t * {@code null} here. Therefore it is highly recommended to implement\\n\\t * this method properly, using the current state of the FactoryBean.\\n\\t * @return the type of object that this FactoryBean creates,\\n\\t * or {@code null} if not known at the time of the call\\n\\t * @see ListableBeanFactory#getBeansOfType\\n\\t */\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Nullable\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),n(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObjectType\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n\\t * Is the object managed by this factory a singleton? That is,\\n\\t * will {@link #getObject()} always return the same object\\n\\t * (a reference that can be cached)?\\n\\t * <p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,\\n\\t * the object returned from {@code getObject()} might get cached\\n\\t * by the owning BeanFactory. Hence, do not return {@code true}\\n\\t * unless the FactoryBean always exposes the same reference.\\n\\t * <p>The singleton status of the FactoryBean itself will generally\\n\\t * be provided by the owning BeanFactory; usually, it has to be\\n\\t * defined as singleton there.\\n\\t * <p><b>NOTE:</b> This method returning {@code false} does not\\n\\t * necessarily indicate that returned objects are independent instances.\\n\\t * An implementation of the extended {@link SmartFactoryBean} interface\\n\\t * may explicitly indicate independent instances through its\\n\\t * {@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}\\n\\t * implementations which do not implement this extended interface are\\n\\t * simply assumed to always return independent instances if the\\n\\t * {@code isSingleton()} implementation returns {@code false}.\\n\\t * <p>The default implementation returns {@code true}, since a\\n\\t * {@code FactoryBean} typically manages a singleton instance.\\n\\t * @return whether the exposed object is a singleton\\n\\t * @see #getObject()\\n\\t * @see SmartFactoryBean#isPrototype()\\n\\t */\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"default\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isSingleton\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"h2\",{attrs:{id:\"_2、实现factorybean接口\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、实现factorybean接口\"}},[t._v(\"#\")]),t._v(\" 2、实现FactoryBean接口\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 实现FactoryBean接口时需要指定泛型\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 泛型类型就是当前工厂要生产的对象的类型\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyFactoryBean\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FactoryBean\")]),n(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getMachineName\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setMachineName\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"machineName \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObject\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 方法内部模拟创建、设置一个对象的复杂过程\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),t._v(\" happyMachine \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \\n        happyMachine\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setMachineName\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" happyMachine\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),n(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObjectType\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回要生产的对象的类型\")]),t._v(\"\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"h2\",{attrs:{id:\"_3、配置bean\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、配置bean\"}},[t._v(\"#\")]),t._v(\" 3、配置bean\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-xml extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 实验十四 FactoryBean机制 --\\x3e\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 --\\x3e\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"id\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"happyMachine3\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.ioc.factory.HappyFactoryBean\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- property标签仍然可以用来通过setXxx()方法给属性赋值 --\\x3e\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"property\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"name\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"value\")]),n(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"iceCreamMachine\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"bean\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),n(\"h2\",{attrs:{id:\"_4、测试获取bean\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、测试获取bean\"}},[t._v(\"#\")]),t._v(\" 4、测试获取bean\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"配置的bean：HappyFactoryBean\")]),t._v(\" \"),n(\"li\",[t._v(\"获取bean后得到的bean：HappyMachine\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-java extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Test\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"testExperiment14\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),t._v(\" happyMachine3 \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HappyMachine\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" iocContainer\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getBean\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"happyMachine3\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" machineName \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" happyMachine3\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getMachineName\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"machineName = \"')]),t._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" machineName\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),n(\"p\",[n(\"RouterLink\",{attrs:{to:\"/pro004-Spring/lecture/chapter01/verse03/experiment13.html\"}},[t._v(\"上一个实验\")]),t._v(\" \"),n(\"RouterLink\",{attrs:{to:\"/pro004-Spring/lecture/chapter01/verse03.html\"}},[t._v(\"回目录\")]),t._v(\" \"),n(\"RouterLink\",{attrs:{to:\"/pro004-Spring/lecture/chapter01/verse03/experiment15.html\"}},[t._v(\"下一个实验\")])],1)])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}
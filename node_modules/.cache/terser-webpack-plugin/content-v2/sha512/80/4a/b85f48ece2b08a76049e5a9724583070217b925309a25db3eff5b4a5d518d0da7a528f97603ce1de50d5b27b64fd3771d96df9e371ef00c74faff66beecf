{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{754:function(t,a,s){\"use strict\";s.r(a);var n=s(44),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"p\",[t._v(\"[TOC]\")]),t._v(\" \"),s(\"h1\",{attrs:{id:\"第二节-拦截器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二节-拦截器\"}},[t._v(\"#\")]),t._v(\" 第二节 拦截器\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1、概念\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、概念\"}},[t._v(\"#\")]),t._v(\" 1、概念\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1拦截器和过滤器解决类似的问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1拦截器和过滤器解决类似的问题\"}},[t._v(\"#\")]),t._v(\" ①拦截器和过滤器解决类似的问题\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-生活中坐地铁的场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-生活中坐地铁的场景\"}},[t._v(\"#\")]),t._v(\" [1]生活中坐地铁的场景\")]),t._v(\" \"),s(\"p\",[t._v(\"为了提高乘车效率，在乘客进入站台前统一检票：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img008.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-程序中\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-程序中\"}},[t._v(\"#\")]),t._v(\" [2]程序中\")]),t._v(\" \"),s(\"p\",[t._v(\"在程序中，使用拦截器在请求到达具体 handler 方法前，统一执行检测。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"images/img009.png\",alt:\"images\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2拦截器-vs-过滤器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2拦截器-vs-过滤器\"}},[t._v(\"#\")]),t._v(\" ②拦截器 VS 过滤器\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-相似点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-相似点\"}},[t._v(\"#\")]),t._v(\" [1]相似点\")]),t._v(\" \"),s(\"p\",[t._v(\"三要素相同\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"拦截：必须先把请求拦住，才能执行后续操作\")]),t._v(\" \"),s(\"li\",[t._v(\"过滤：拦截器或过滤器存在的意义就是对请求进行统一处理\")]),t._v(\" \"),s(\"li\",[t._v(\"放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-不同点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-不同点\"}},[t._v(\"#\")]),t._v(\" [2]不同点\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"工作平台不同\\n\"),s(\"ul\",[s(\"li\",[t._v(\"过滤器工作在 Servlet 容器中\")]),t._v(\" \"),s(\"li\",[t._v(\"拦截器工作在 SpringMVC 的基础上\")])])]),t._v(\" \"),s(\"li\",[t._v(\"拦截的范围\\n\"),s(\"ul\",[s(\"li\",[t._v(\"过滤器：能够拦截到的最大范围是整个 Web 应用\")]),t._v(\" \"),s(\"li\",[t._v(\"拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求\")])])]),t._v(\" \"),s(\"li\",[t._v(\"IOC 容器支持\\n\"),s(\"ul\",[s(\"li\",[t._v(\"过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的\")]),t._v(\" \"),s(\"li\",[t._v(\"拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_3-选择\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-选择\"}},[t._v(\"#\")]),t._v(\" [3]选择\")]),t._v(\" \"),s(\"p\",[t._v(\"功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2、使用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、使用\"}},[t._v(\"#\")]),t._v(\" 2、使用\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1创建拦截器类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1创建拦截器类\"}},[t._v(\"#\")]),t._v(\" ①创建拦截器类\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-实现接口\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-实现接口\"}},[t._v(\"#\")]),t._v(\" [1]实现接口\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Process01Interceptor\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HandlerInterceptor\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Logger\")]),t._v(\" logger \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LoggerFactory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getLogger\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在处理请求的目标 handler 方法前执行\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"preHandle\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \\n        logger\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"debug\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Process01Interceptor preHandle方法\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n         \\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回true：放行\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回false：不放行\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在目标 handler 方法之后，渲染视图之前\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"postHandle\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ModelAndView\")]),t._v(\" modelAndView\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n \\n        logger\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"debug\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Process01Interceptor postHandle方法\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 渲染视图之后执行\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"afterCompletion\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletRequest\")]),t._v(\" request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HttpServletResponse\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" ex\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \\n        logger\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"debug\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Process01Interceptor afterCompletion方法\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"p\",[s(\"span\",{staticStyle:{color:\"blue\",\"font-weight\":\"bold\"}},[t._v(\"单个拦截器执行顺序\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"preHandle() 方法\")]),t._v(\" \"),s(\"li\",[t._v(\"目标 handler 方法\")]),t._v(\" \"),s(\"li\",[t._v(\"postHandle() 方法\")]),t._v(\" \"),s(\"li\",[t._v(\"渲染视图\")]),t._v(\" \"),s(\"li\",[t._v(\"afterCompletion() 方法\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-继承类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-继承类\"}},[t._v(\"#\")]),t._v(\" [2]继承类\")]),t._v(\" \"),s(\"p\",[t._v(\"在较低版本的 SpringMVC 中，实现 HandlerInterceptor 接口需要把所有抽象方法都实现。但是又不是每个方法都需要使用，导致代码比较繁琐。\")]),t._v(\" \"),s(\"p\",[t._v(\"此时可以通过继承 HandlerInterceptorAdapter 类同样可以创建拦截器类。HandlerInterceptorAdapter 类中已经给 HandlerInterceptor 接口提供了默认实现，我们继承后不需要把每个方法都实现，只需要把有用的方法重写即可。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 SpringMVC 较高版本（例如：5.3版本以上）中，HandlerInterceptor 接口已经借助 JDK 1.8 新特性让每个抽象方法都给出了默认实现，所以 HandlerInterceptorAdapter 这个类被标记为过时。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Deprecated\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"abstract\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"HandlerInterceptorAdapter\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AsyncHandlerInterceptor\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"_2注册拦截器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2注册拦截器\"}},[t._v(\"#\")]),t._v(\" ②注册拦截器\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-默认拦截全部请求\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-默认拦截全部请求\"}},[t._v(\"#\")]),t._v(\" [1]默认拦截全部请求\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 注册拦截器 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptors\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 直接通过内部 bean 配置的拦截器默认拦截全部请求（SpringMVC 范围内） --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.mvc.interceptor.Process01Interceptor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptors\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"_2-配置拦截路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-配置拦截路径\"}},[t._v(\"#\")]),t._v(\" [2]配置拦截路径\")]),t._v(\" \"),s(\"h5\",{attrs:{id:\"_1-精确匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-精确匹配\"}},[t._v(\"#\")]),t._v(\" (1)精确匹配\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 具体配置拦截器可以指定拦截的请求地址 --\\x3e\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 精确匹配 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"mapping\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"path\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"/common/request/one\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.mvc.interceptor.Process03Interceptor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h5\",{attrs:{id:\"_2-模糊匹配-匹配单层路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-模糊匹配-匹配单层路径\"}},[t._v(\"#\")]),t._v(\" (2)模糊匹配：匹配单层路径\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- /*匹配路径中的一层 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"mapping\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"path\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"/common/request/*\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.mvc.interceptor.Process04Interceptor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h5\",{attrs:{id:\"_3-模糊匹配-匹配多层路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-模糊匹配-匹配多层路径\"}},[t._v(\"#\")]),t._v(\" (3)模糊匹配：匹配多层路径\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- /**匹配路径中的多层 --\\x3e\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"mapping\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"path\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"/common/request/**\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.mvc.interceptor.Process05Interceptor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"_3-配置不拦截路径\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-配置不拦截路径\"}},[t._v(\"#\")]),t._v(\" [3]配置不拦截路径\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-xml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[s(\"code\",[t._v(\"        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- /**匹配路径中的多层 --\\x3e\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"mapping\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"path\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"/common/request/**\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n \\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"\\x3c!-- 使用 mvc:exclude-mapping 标签配置不拦截的地址 --\\x3e\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"exclude-mapping\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"path\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"/common/request/two/bbb\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n \\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.atguigu.mvc.interceptor.Process05Interceptor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"mvc:\")]),t._v(\"interceptor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"_3多个拦截器执行顺序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3多个拦截器执行顺序\"}},[t._v(\"#\")]),t._v(\" ③多个拦截器执行顺序\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"preHandle()方法：和配置的顺序一样\")]),t._v(\" \"),s(\"li\",[t._v(\"目标handler方法\")]),t._v(\" \"),s(\"li\",[t._v(\"postHandle()方法：和配置的顺序相反\")]),t._v(\" \"),s(\"li\",[t._v(\"渲染视图\")]),t._v(\" \"),s(\"li\",[t._v(\"afterCompletion()方法：和配置的顺序相反\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3、案例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、案例\"}},[t._v(\"#\")]),t._v(\" 3、案例\")]),t._v(\" \"),s(\"p\",[t._v(\"一个网站有 5 个资源，其中两个无须登录即可访问，另外三个需要登录后才能访问。如果不登录就访问那三个资源，会自动跳转到登录页面并给出提示：请登录后再操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"提示：将数据存入请求域、转发或重定向请求都需要使用原生对象来完成，在拦截器中 SpringMVC 并没有提供 Model、ModelMap 等 API 供我们使用。\")]),t._v(\" \"),s(\"p\",[t._v(\"访问资源的请求地址可参考：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"公共资源1：/public/resource/one\")]),t._v(\" \"),s(\"li\",[t._v(\"公共资源2：/public/resouce/two\")]),t._v(\" \"),s(\"li\",[t._v(\"私密资源1：/private/resouce/one\")]),t._v(\" \"),s(\"li\",[t._v(\"私密资源2：/private/resouce/two\")]),t._v(\" \"),s(\"li\",[t._v(\"私密资源3：/private/resouce/three\")])]),t._v(\" \"),s(\"p\",[s(\"RouterLink\",{attrs:{to:\"/pro005-SpringMVC/lecture/chapter04/verse01.html\"}},[t._v(\"上一节\")]),t._v(\" \"),s(\"RouterLink\",{attrs:{to:\"/pro005-SpringMVC/lecture/chapter04/index.html\"}},[t._v(\"回目录\")]),t._v(\" \"),s(\"RouterLink\",{attrs:{to:\"/pro005-SpringMVC/lecture/chapter04/verse03.html\"}},[t._v(\"下一节\")])],1)])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}
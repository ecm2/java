{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{1656:function(t,a,e){\"use strict\";e.r(a);var r=e(44),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"p\"),e(\"div\",{staticClass:\"table-of-contents\"},[e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#_1、含义\"}},[t._v(\"1、含义\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#_2、思想\"}},[t._v(\"2、思想\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#_3、对应的配置文件\"}},[t._v(\"3、对应的配置文件\")])])])]),e(\"p\"),t._v(\" \"),e(\"h1\",{attrs:{id:\"pom\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pom\"}},[t._v(\"#\")]),t._v(\" POM\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_1、含义\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、含义\"}},[t._v(\"#\")]),t._v(\" 1、含义\")]),t._v(\" \"),e(\"p\",[t._v(\"POM：Project Object Model，项目对象模型。和POM类似的是：DOM：Document Object Model，文档对象模型。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_2、思想\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、思想\"}},[t._v(\"#\")]),t._v(\" 2、思想\")]),t._v(\" \"),e(\"p\",[t._v(\"POM表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算相关的数据。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_3、对应的配置文件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、对应的配置文件\"}},[t._v(\"#\")]),t._v(\" 3、对应的配置文件\")]),t._v(\" \"),e(\"p\",[t._v(\"POM理念集中体现在Maven工程根目录下pom.xml这个配置文件中。所以这个pom.xml配置文件就是Maven工程的核心配置文件。其实学习Maven就是学这个文件怎么配置，各个配置有什么用。\")]),t._v(\" \"),e(\"p\",[e(\"RouterLink\",{attrs:{to:\"/pro002-maven/note/index.html\"}},[t._v(\"回目录\")]),t._v(\" \"),e(\"RouterLink\",{attrs:{to:\"/pro002-maven/note/concept-directory.html\"}},[t._v(\"下一节\")])],1)])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}